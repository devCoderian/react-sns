{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { delay, put, takeLatest, fork } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILUARE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/ian07/Desktop/reactSNS/prepare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","delay","put","takeLatest","fork","axios","addPostAPI","data","post","action","type","response","all"],"mappings":";;oDAMUA,O;qDAkBAC,Y;qDAMeC,Q;;AA9BzB,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,IAAjC,QAA6C,0BAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUT,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAKQ,iBAAMC,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAE,kBADA;AAENH,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAML,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAE,mBADA;AAENH,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFb,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUR,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,UAAU,CAAC,kBAAD,EAAqBL,OAArB,CAAhB;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMY,GAAG,CAAC,CACNR,IAAI,CAACL,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { delay, put, takeLatest, fork } from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000)\r\n        //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: 'ADD_POST_FAILUARE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    \r\n    yield takeLatest('ADD_POST_REQUEST', addPost) //주번 , 백번 잘못 눌러도 마지막것만 //동시에 로딩되는 것 중에서만 프론트에서 그렇게 생각한다. 서버에는 두번 저장된다 응답을 취소하는 것\r\n    //yield throttle('ADD_POST_REQUEST' , addPost, 10000); //1분동안 한번만 요청! 중복요청 불가\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost)\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}