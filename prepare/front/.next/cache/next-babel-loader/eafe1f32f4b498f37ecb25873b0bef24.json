{"ast":null,"code":"import { delay, put, takeLatest, fork, all } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    }); //포스트추가할때 유저 리듀서 사용을 위해 필요\n\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postid}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //주번 , 백번 잘못 눌러도 마지막것만 //동시에 로딩되는 것 중에서만 프론트에서 그렇게 생각한다. 서버에는 두번 저장된다 응답을 취소하는 것\n  //yield throttle('ADD_POST_REQUEST' , addPost, 10000); //1분동안 한번만 요청! 중복요청 불가\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost)]);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-sns/prepare/front/sagas/post.js"],"names":["delay","put","takeLatest","fork","all","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","type","err","error","response","addCommentAPI","postid","addComment","watchAddPost","watchCommentPost","postSaga"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,IAAjC,EAAuCC,GAAvC,QAAiD,0BAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EACsBC,gBADtB,EACwCC,gBADxC,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAE6CC,mBAF7C,QAGM,kBAHN;AAIA,SAASC,cAAT,QAA+B,kBAA/B;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOT,KAAK,CAACU,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACE;AACD,UAAMjB,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMC,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEV,gBADA;AAENM,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT,CAJD,CAQC;;AACA,UAAMb,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GAZD,CAYC,OAAMO,GAAN,EAAU;AACP,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEZ,gBADA;AAENc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,aAAT,CAAuBR,IAAvB,EAA4B;AACxB,SAAOT,KAAK,CAACU,IAAN,CAAY,aAAYD,IAAI,CAACS,MAAO,UAApC,EAA+CT,IAA/C,CAAP;AACH;;AAED,UAAUU,UAAV,CAAqBP,MAArB,EAA4B;AACxB,MAAG;AACE;AACD,UAAMjB,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMC,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAER,mBADA;AAENI,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GARD,CAQC,OAAMK,GAAN,EAAU;AACP,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAET,mBADA;AAENW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAID,UAAUW,YAAV,GAAwB;AAEpB,QAAMvB,UAAU,CAACK,gBAAD,EAAmBS,OAAnB,CAAhB,CAFoB,CAEwB;AAC5C;AACH;;AAED,UAAUU,gBAAV,GAA4B;AACxB,QAAMxB,UAAU,CAACS,mBAAD,EAAsBa,UAAtB,CAAhB;AACH;;AACD,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMvB,GAAG,CAAC,CACND,IAAI,CAACsB,YAAD,CADE,EAENtB,IAAI,CAACuB,gBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { delay, put, takeLatest, fork, all} from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\nimport { \r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS,ADD_COMMENT_REQUEST\r\n}from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user'\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000)\r\n        //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n        //포스트추가할때 유저 리듀서 사용을 위해 필요\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postid}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000)\r\n        //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* watchAddPost(){\r\n    \r\n    yield takeLatest(ADD_POST_REQUEST, addPost) //주번 , 백번 잘못 눌러도 마지막것만 //동시에 로딩되는 것 중에서만 프론트에서 그렇게 생각한다. 서버에는 두번 저장된다 응답을 취소하는 것\r\n    //yield throttle('ADD_POST_REQUEST' , addPost, 10000); //1분동안 한번만 요청! 중복요청 불가\r\n}\r\n\r\nfunction* watchCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost)\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}