{"ast":null,"code":"import { delay, put, takeLatest, fork, all } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); //주번 , 백번 잘못 눌러도 마지막것만 //동시에 로딩되는 것 중에서만 프론트에서 그렇게 생각한다. 서버에는 두번 저장된다 응답을 취소하는 것\n  //yield throttle('ADD_POST_REQUEST' , addPost, 10000); //1분동안 한번만 요청! 중복요청 불가\n\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-sns/prepare/front/sagas/post.js"],"names":["delay","put","takeLatest","fork","all","axios","ADD_COMMENT_REQUEST","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","data","post","addPost","action","type","err","error","response","addCommentAPI","addComment","watchAddPost","postSaga"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,IAAjC,EAAuCC,GAAvC,QAAiD,0BAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,mBAAR,EAA6BC,gBAA7B,EAA+CC,gBAA/C,EAAiEC,gBAAjE,QACM,kBADN;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAON,KAAK,CAACO,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACE;AACD,UAAMd,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMC,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEN,gBADA;AAENE,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GARD,CAQC,OAAMK,GAAN,EAAU;AACP,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAER,gBADA;AAENU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,aAAT,CAAuBR,IAAvB,EAA4B;AACxB,SAAON,KAAK,CAACO,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,UAAUS,UAAV,CAAqBN,MAArB,EAA4B;AACxB,MAAG;AACE;AACD,UAAMd,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMC,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEN,gBADA;AAENE,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GARD,CAQC,OAAMK,GAAN,EAAU;AACP,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAER,gBADA;AAENU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAID,UAAUU,YAAV,GAAwB;AAEpB,QAAMnB,UAAU,CAACM,gBAAD,EAAmBK,OAAnB,CAAhB,CAFoB,CAEwB;AAC5C;;AACA,QAAMX,UAAU,CAACI,mBAAD,EAAsBc,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAMlB,GAAG,CAAC,CACND,IAAI,CAACkB,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { delay, put, takeLatest, fork, all} from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\nimport {ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS\r\n}from '../reducers/post';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000)\r\n        //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post('/api/comment', data)\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000)\r\n        //const result = yield call(addPostAPI,action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* watchAddPost(){\r\n    \r\n    yield takeLatest(ADD_POST_REQUEST, addPost) //주번 , 백번 잘못 눌러도 마지막것만 //동시에 로딩되는 것 중에서만 프론트에서 그렇게 생각한다. 서버에는 두번 저장된다 응답을 취소하는 것\r\n    //yield throttle('ADD_POST_REQUEST' , addPost, 10000); //1분동안 한번만 요청! 중복요청 불가\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost)\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}