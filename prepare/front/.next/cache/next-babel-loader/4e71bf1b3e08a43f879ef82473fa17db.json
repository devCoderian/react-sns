{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signup),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, put, take, takeLatest, takeEvery, fork } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('saga login function');\n          _context.prev = 1;\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 8]]);\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILUARE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signupAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction signup() {\n  return _regeneratorRuntime.wrap(function signup$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: LOG_OUT_FAILUARE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} //이벤트 리스너 같은 역할을 한다. 단점 1회용 -> 해결하기 ->while\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), //call이랑은 다름 \n          fork(watchLogout), //fork나 call로 제너레이터 함수를 실행시켜준다. all은 함수를 동시에 실행\n          fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-sns/prepare/front/sagas/user.js"],"names":["login","logout","signup","watchLogin","watchLogout","watchSignup","userSaga","all","delay","put","take","takeLatest","takeEvery","fork","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","post","action","console","log","type","data","error","response","logoutAPI","LOG_OUT_FAILUARE","signupAPI","signUp"],"mappings":"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","sourcesContent":["import { all, delay, put, take, takeLatest, takeEvery, fork} from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n    LOG_IN_REQUEST,LOG_IN_SUCCESS,LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_FAILURE,\r\n    SIGN_UP_REQUEST,SIGN_UP_SUCCESS, SIGN_UP_FAILURE\r\n \r\n  } from '../reducers/user';\r\nfunction loginAPI(){\r\n    return axios.post('/api/login')\r\n}\r\n\r\n\r\n\r\nfunction* login(action){\r\n    console.log('saga login function')\r\n    try{\r\n        //서버가 없기 때문\r\n        yield delay(1000);\r\n        //const result = yield call(loginAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        //dispatch\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logoutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logout(){\r\n    \r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000);\r\n        //const result = yield call(logoutAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_FAILUARE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signupAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* signup(){\r\n    \r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000);\r\n        //const result = yield call(logoutAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_FAILUARE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n//이벤트 리스너 같은 역할을 한다. 단점 1회용 -> 해결하기 ->while\r\nfunction* watchLogin(){\r\n    //while(true){\r\n        yield takeLatest(LOG_IN_REQUEST, login) //login이라는 액션이 실행될 때까지 기다리겠다. LOG_IN_REQUEST 액션이 실행되면 login 함수 실행\r\n    //}\r\n    // yield takeEvery('LOG_IN_REQUEST', login) -> 보통 이걸쓴다.\r\n}\r\nfunction* watchLogout(){\r\n    \r\n        yield takeEvery(LOG_OUT_REQUEST, logout) //takeLatest 써야함 \r\n    \r\n}\r\nfunction* watchSignup(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin), //call이랑은 다름 \r\n        fork(watchLogout), //fork나 call로 제너레이터 함수를 실행시켜준다. all은 함수를 동시에 실행\r\n        fork(watchSignup)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}