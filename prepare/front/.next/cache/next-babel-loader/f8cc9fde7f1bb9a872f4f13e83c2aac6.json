{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\goman\\\\Desktop\\\\react-sns\\\\prepare\\\\front\\\\components\\\\PostCardContent.js\",\n    _this = this;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/dist/client/link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PostCardContent = function PostCardContent(_ref) {\n  var postData = _ref.postData;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: postData.split(/(#[^\\s#]+)/g).map(function (v, i) {\n      if (v.match(/(#[^\\s#]+)/)) {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: v\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 25\n          }, _this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 25\n        }, _this);\n      }\n\n      return v;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = PostCardContent;\nPostCardContent.prototypes = {\n  postData: PropTypes.string.isRequired\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-sns/prepare/front/components/PostCardContent.js"],"names":["React","PropTypes","Link","PostCardContent","postData","split","map","v","i","match","pathname","query","tag","slice","prototypes","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AAEpC,sBACI;AAAA,cAEKA,QAAQ,CAACC,KAAT,CAAe,aAAf,EAA8BC,GAA9B,CAAkC,UAACC,CAAD,EAAIC,CAAJ,EAAQ;AACvC,UAAGD,CAAC,CAACE,KAAF,CAAQ,YAAR,CAAH,EAAyB;AACrB,4BACI,QAAC,IAAD;AACA,UAAA,IAAI,EAAE;AAAEC,YAAAA,QAAQ,EAAE,UAAZ;AAAwBC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,GAAG,EAAEL,CAAC,CAACM,KAAF,CAAQ,CAAR;AAAP;AAA/B,WADN;AAEA,UAAA,EAAE,qBAAcN,CAAC,CAACM,KAAF,CAAQ,CAAR,CAAd,CAFF;AAAA,iCAKA;AAAA,sBAAIN;AAAJ;AAAA;AAAA;AAAA;AAAA;AALA,WAGKC,CAHL;AAAA;AAAA;AAAA;AAAA,iBADJ;AASH;;AACD,aAAOD,CAAP;AACH,KAbA;AAFL;AAAA;AAAA;AAAA;AAAA,WADJ;AAmBH,CArBD;;KAAMJ,e;AAsBNA,eAAe,CAACW,UAAhB,GAA6B;AACzBV,EAAAA,QAAQ,EAAEH,SAAS,CAACc,MAAV,CAAiBC;AADF,CAA7B;AAGA,eAAeb,eAAf","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Link from 'next/dist/client/link'\r\n\r\nconst PostCardContent = ({postData}) => {\r\n\r\n    return (\r\n        <div>\r\n            {/* 사용자 의도가 없으면 리렌더링 될일이 없기때문에 키로 인덱스 사용 가능 key는 똑같은 단어 생성할 수도 있어서*/}\r\n            {postData.split(/(#[^\\s#]+)/g).map((v, i)=>{\r\n                if(v.match(/(#[^\\s#]+)/)){\r\n                    return (\r\n                        <Link\r\n                        href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\r\n                        as={`/hashtag/${v.slice(1)}`}\r\n                        key={i}\r\n                      >\r\n                        <a>{v}</a>\r\n                      </Link>\r\n                      )\r\n                }\r\n                return v;\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nPostCardContent.prototypes = {\r\n    postData: PropTypes.string.isRequired,\r\n}\r\nexport default PostCardContent\r\n"]},"metadata":{},"sourceType":"module"}