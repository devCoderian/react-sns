{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ian07\\\\Desktop\\\\reactSNS\\\\prepare\\\\front\\\\components\\\\LoginForm.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from 'antd';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport { useCallback } from \"react\";\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginAction } from '../reducers/user';\nimport { loginRequestAction } from '../reducers/user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ButtonWrapper = styled.div`\n    margin-top: 10px\n`;\nconst FormWrapper = styled(Form)`\npadding: 10px\n`; // const style = useMemo(()=>({marginTop: 10}), []); -> 스타일 컴포넌트 대신 사용 \n\nconst LoginForm = () => {\n  const {\n    loginLoading\n  } = useSelector(state => state.user); //props 필요 없음 redux const LoginForm = ({setIsLoggedIn}) \n\n  const dispatch = useDispatch(); // const [id, setId] = useState('');\n  // const onChangeId = useCallback((e) => {\n  //     setId(e.target.value);\n  // },[]);\n\n  const [email, onChangeEmail] = useInput('');\n  const [password, onChangePassword] = useInput(''); //컴포넌트의 함수로 넘겨주는 props는 useCallBack(함수캐싱) 꼭쓰기-> 최적화를 위해\n  //submit이 완료되면 onFinish 가 호출됨 antd의 onFinish는 자동으로 e.preventDefault가 설정되어 있음\n\n  const onSubmitForm = useCallback(() => {\n    // e.preventDefault antd에서 생략\n    // component에 넣는 거니까 useCallback으로 감싸기\n    console.log(email, password); // setIsLoggedIn(true); props 받을 때\n    // dispatch(loginAction({id,password})); saga전\n\n    dispatch(loginRequestAction({\n      email,\n      password\n    }));\n  }, [email, password]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormWrapper, {\n      onFinish: onSubmitForm,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"user-id\",\n          children: \"\\uC774\\uBA54\\uC77C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"userId\",\n          value: email,\n          onChange: onChangeEmail,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"user-password\",\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"user-password\",\n          type: \"password\",\n          value: password,\n          onChange: onChangePassword,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: loginLoading,\n          children: \"\\uB85C\\uADF8\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n\nLoginForm.propTypes = {// setIsLoggedIn: PropTypes.func.isRequired,\n};\nexport default LoginForm;\n/*\r\n리렌더링 ->컴포넌트 안 함수가 \r\n처음부터 끝까지 다시 실행되는 것은 맞으나 전체가 다시 그려지는게 아니라(useCallback, memo 등등 제외- 배열값이 바꾸지 않는한)\r\n리턴 부분에서 바뀐 부분만 다시 그리는 것\r\n리턴 부분이 버츄얼 돔 -> 이전과 비교해서 달라진 부분만 다시 그려주는 것\r\n*/","map":{"version":3,"sources":["C:/Users/ian07/Desktop/reactSNS/prepare/front/components/LoginForm.js"],"names":["React","useState","PropTypes","Form","Input","Button","Link","styled","useCallback","useInput","useDispatch","useSelector","loginAction","loginRequestAction","ButtonWrapper","div","FormWrapper","LoginForm","loginLoading","state","user","dispatch","email","onChangeEmail","password","onChangePassword","onSubmitForm","console","log","propTypes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form, Input, Button } from 'antd';\r\nimport Link from 'next/link';\r\nimport styled from 'styled-components';\r\nimport { useCallback } from \"react\";\r\nimport useInput from '../hooks/useInput';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginAction } from '../reducers/user';\r\nimport { loginRequestAction } from '../reducers/user';\r\nconst ButtonWrapper = styled.div`\r\n    margin-top: 10px\r\n`;\r\nconst FormWrapper = styled(Form)`\r\npadding: 10px\r\n`;\r\n// const style = useMemo(()=>({marginTop: 10}), []); -> 스타일 컴포넌트 대신 사용 \r\n\r\nconst LoginForm = () => {\r\n    const { loginLoading } = useSelector((state) => state.user);\r\n    //props 필요 없음 redux const LoginForm = ({setIsLoggedIn}) \r\n    const dispatch = useDispatch(); \r\n    // const [id, setId] = useState('');\r\n    // const onChangeId = useCallback((e) => {\r\n    //     setId(e.target.value);\r\n    // },[]);\r\n    const [email, onChangeEmail] = useInput('');\r\n    const [password, onChangePassword] = useInput('');\r\n  \r\n   //컴포넌트의 함수로 넘겨주는 props는 useCallBack(함수캐싱) 꼭쓰기-> 최적화를 위해\r\n\r\n    //submit이 완료되면 onFinish 가 호출됨 antd의 onFinish는 자동으로 e.preventDefault가 설정되어 있음\r\n    const onSubmitForm = useCallback(() =>{\r\n        // e.preventDefault antd에서 생략\r\n        // component에 넣는 거니까 useCallback으로 감싸기\r\n        console.log(email, password);\r\n        // setIsLoggedIn(true); props 받을 때\r\n        // dispatch(loginAction({id,password})); saga전\r\n        dispatch(loginRequestAction({email,password}))\r\n    }, [email, password]);\r\n\r\n    return (\r\n        <>\r\n          <FormWrapper onFinish = {onSubmitForm}>\r\n              <div>\r\n                  <label htmlFor = \"user-id\">이메일</label>\r\n                  <br />\r\n                  <Input name = \"userId\" value = {email} onChange = {onChangeEmail} required />\r\n              </div>\r\n              <div>\r\n                  <label htmlFor = \"user-password\">비밀번호</label>\r\n                  <br />\r\n                  <Input \r\n                    name = \"user-password\" \r\n                    type = \"password\"\r\n                    value = {password} \r\n                    onChange = {onChangePassword} \r\n                    required \r\n                    />\r\n              </div>\r\n              <ButtonWrapper>\r\n                {/* <div style = {style}> 이렇게하면 useMemo 사용*/}\r\n                {/* <div style = {{marginTop : 10}}> 이렇게하면 {} === {} false로 달라진게 없는데 리렌더링 됨*/}\r\n                  <Button type = \"primary\" htmlType = \"submit\" loading = {loginLoading}>로그인</Button>\r\n                  <Link href = \"/signup\"><a><Button>회원가입</Button></a></Link>\r\n              </ButtonWrapper>\r\n          </FormWrapper>  \r\n        </>\r\n    )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    // setIsLoggedIn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default LoginForm\r\n\r\n/*\r\n리렌더링 ->컴포넌트 안 함수가 \r\n처음부터 끝까지 다시 실행되는 것은 맞으나 전체가 다시 그려지는게 아니라(useCallback, memo 등등 제외- 배열값이 바꾸지 않는한)\r\n리턴 부분에서 바뀐 부분만 다시 그리는 것\r\n리턴 부분이 버츄얼 돔 -> 이전과 비교해서 달라진 부분만 다시 그려주는 것\r\n*/"]},"metadata":{},"sourceType":"module"}