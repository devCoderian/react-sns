{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga'; // import thunkMiddleware from 'redux-thunk'\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar configureStore = function configureStore(context) {\n  //미들웨어 만들어보기, 액션 객체 만들기 \n  // const loggerMiddleware = ({dispatch, getState}) => (next) => (action) =>{\n  //     console.log(action);\n  //     return next(action);\n  // }\n  //const middlewares = [thunkMiddleware, loggerMiddleware]; 사용해보기\n  //    const middlewares = [thunkMiddleware];\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); //데브툴 연결 보안에는 취약\n  //개발용 미들웨어 설치 필요 npm i redux-devtools-extension\n\n  var store = createStore(reducer, enhancer); //미들웨어는 enhancer를 넣어서 사용가능\n  // store.dispatch({\n  //     type: 'CHANGE_NICKNAME',\n  //     data: '정이안'\n  // })\n  //dispatch하는 순간 리듀서로 전달된다.\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; //debugging이 true일시 리덕스에 대한 설명 참조 가능\n\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/ian07/Desktop/reactSNS/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAmC,0BAAnC;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAY;AAC/B;AACA;AACA;AACA;AACA;AACC;AAGL;AACI,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AACA,MAAMM,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QAChBV,OAAO,CAACC,eAAe,MAAf,SAAmBQ,WAAnB,CAAD,CADS,GAEhBP,mBAAmB,CAACD,eAAe,MAAf,SAAmBQ,WAAnB,CAAD,CAFpB,CAZ+B,CAe/B;AACA;;AACA,MAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB,CAjB+B,CAkB/B;AAEA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBR,QAAnB,CAAjB;AACA,SAAOM,KAAP;AACH,CA5BD,C,CA8BA;;;AACA,IAAMG,OAAO,GAAGhB,aAAa,CAACQ,cAAD,EAAiB;AAC1CS,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools }from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\n// import thunkMiddleware from 'redux-thunk'\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\nconst configureStore = (context) =>{\r\n    //미들웨어 만들어보기, 액션 객체 만들기 \r\n    // const loggerMiddleware = ({dispatch, getState}) => (next) => (action) =>{\r\n    //     console.log(action);\r\n    //     return next(action);\r\n    // }\r\n     //const middlewares = [thunkMiddleware, loggerMiddleware]; 사용해보기\r\n \r\n \r\n//    const middlewares = [thunkMiddleware];\r\n    const sagaMiddleware = createSagaMiddleware(); \r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ?compose(applyMiddleware(...middlewares))\r\n    :composeWithDevTools(applyMiddleware(...middlewares))\r\n    //데브툴 연결 보안에는 취약\r\n    //개발용 미들웨어 설치 필요 npm i redux-devtools-extension\r\n    const store = createStore(reducer, enhancer);\r\n    //미들웨어는 enhancer를 넣어서 사용가능\r\n\r\n    // store.dispatch({\r\n    //     type: 'CHANGE_NICKNAME',\r\n    //     data: '정이안'\r\n    // })\r\n    //dispatch하는 순간 리듀서로 전달된다.\r\n\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;    \r\n};\r\n\r\n//debugging이 true일시 리덕스에 대한 설명 참조 가능\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development' \r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}