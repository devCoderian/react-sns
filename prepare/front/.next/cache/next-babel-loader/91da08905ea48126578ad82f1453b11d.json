{"ast":null,"code":"import { all, delay, put, take, takeLatest, takeEvery, fork } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, signUp } from '../reducers/user';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* login(action) {\n  console.log('saga login function');\n\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(loginAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n    //dispatch\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(logoutAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILUARE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signupAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signup() {\n  try {\n    //서버가 없기 때문\n    yield delay(1000); //const result = yield call(logoutAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILUARE,\n      error: err.response.data\n    });\n  }\n} //이벤트 리스너 같은 역할을 한다. 단점 1회용 -> 해결하기 ->while\n\n\nfunction* watchLogin() {\n  //while(true){\n  yield takeLatest(LOG_IN_REQUEST, login); //login이라는 액션이 실행될 때까지 기다리겠다. LOG_IN_REQUEST 액션이 실행되면 login 함수 실행\n  //}\n  // yield takeEvery('LOG_IN_REQUEST', login) -> 보통 이걸쓴다.\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout); //takeLatest 써야함 \n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), //call이랑은 다름 \n  fork(watchLogout), //fork나 call로 제너레이터 함수를 실행시켜준다. all은 함수를 동시에 실행\n  fork(watchSignup)]);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-sns/prepare/front/sagas/user.js"],"names":["all","delay","put","take","takeLatest","takeEvery","fork","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","signUp","loginAPI","post","login","action","console","log","type","data","err","error","response","logoutAPI","logout","LOG_OUT_FAILUARE","signupAPI","signup","watchLogin","watchLogout","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuDC,IAAvD,QAAkE,0BAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,EAOIC,eAPJ,EAQIC,MARJ,QAWS,kBAXT;;AAYA,SAASC,QAAT,GAAmB;AACf,SAAOT,KAAK,CAACU,IAAN,CAAW,YAAX,CAAP;AACH;;AAID,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AACA,MAAG;AACC;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;AACA;;AACA,UAAMC,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEb,cADA;AAENc,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFP,KAAD,CAAT;AAIH,GATD,CASC,OAAMC,GAAN,EAAU;AACP,UAAMtB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEZ,cADA;AAENe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASI,SAAT,GAAoB;AAChB,SAAOpB,KAAK,CAACU,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUW,MAAV,GAAkB;AAEd,MAAG;AACE;AACD,UAAM3B,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMC,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH,GAPD,CAOC,OAAMY,GAAN,EAAU;AACP,UAAMtB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEO,gBADA;AAENJ,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAoB;AAChB,SAAOvB,KAAK,CAACU,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUc,MAAV,GAAkB;AAEd,MAAG;AACE;AACD,UAAM9B,KAAK,CAAC,IAAD,CAAX,CAFD,CAGC;;AACA,UAAMC,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH,GAPD,CAOC,OAAMY,GAAN,EAAU;AACP,UAAMtB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEO,gBADA;AAENJ,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ,C,CAED;;;AACA,UAAUS,UAAV,GAAsB;AAClB;AACI,QAAM5B,UAAU,CAACI,cAAD,EAAiBU,KAAjB,CAAhB,CAFc,CAE0B;AAC5C;AACA;AACH;;AACD,UAAUe,WAAV,GAAuB;AAEf,QAAM5B,SAAS,CAACM,eAAD,EAAkBiB,MAAlB,CAAf,CAFe,CAE0B;AAEhD;;AACD,UAAUM,WAAV,GAAuB;AACnB,QAAM9B,UAAU,CAACU,eAAD,EAAkBC,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUoB,QAAV,GAAoB;AAC/B,QAAMnC,GAAG,CAAC,CACNM,IAAI,CAAC0B,UAAD,CADE,EACY;AAClB1B,EAAAA,IAAI,CAAC2B,WAAD,CAFE,EAEa;AACnB3B,EAAAA,IAAI,CAAC4B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, delay, put, take, takeLatest, takeEvery, fork} from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    signUp,\r\n\r\n \r\n  } from '../reducers/user';\r\nfunction loginAPI(){\r\n    return axios.post('/api/login')\r\n}\r\n\r\n\r\n\r\nfunction* login(action){\r\n    console.log('saga login function')\r\n    try{\r\n        //서버가 없기 때문\r\n        yield delay(1000);\r\n        //const result = yield call(loginAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        //dispatch\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logoutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logout(){\r\n    \r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000);\r\n        //const result = yield call(logoutAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_FAILUARE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signupAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* signup(){\r\n    \r\n    try{\r\n         //서버가 없기 때문\r\n        yield delay(1000);\r\n        //const result = yield call(logoutAPI, action.data) //실행 //call 은 동기 함수(pai호출할때까지 기다려줌)호출 fork는 비동기 함수(결과 기다리지않고 바로 다음줄) 호출\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_FAILUARE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n//이벤트 리스너 같은 역할을 한다. 단점 1회용 -> 해결하기 ->while\r\nfunction* watchLogin(){\r\n    //while(true){\r\n        yield takeLatest(LOG_IN_REQUEST, login) //login이라는 액션이 실행될 때까지 기다리겠다. LOG_IN_REQUEST 액션이 실행되면 login 함수 실행\r\n    //}\r\n    // yield takeEvery('LOG_IN_REQUEST', login) -> 보통 이걸쓴다.\r\n}\r\nfunction* watchLogout(){\r\n    \r\n        yield takeEvery(LOG_OUT_REQUEST, logout) //takeLatest 써야함 \r\n    \r\n}\r\nfunction* watchSignup(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin), //call이랑은 다름 \r\n        fork(watchLogout), //fork나 call로 제너레이터 함수를 실행시켜준다. all은 함수를 동시에 실행\r\n        fork(watchSignup)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}