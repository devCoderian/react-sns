{"ast":null,"code":"import { all, fork } from 'redux-saga/effects';\nimport postSaga from './post';\nimport userSaga from './user';\nexport default function* rootSaga() {\n  yield all([// saga 쪼개기 전\n  // fork(watchLogin), //call이랑은 다름 \n  // fork(watchLogout), //fork나 call로 제너레이터 함수를 실행시켜준다. all은 함수를 동시에 실행\n  // fork(watchAddPost) \n  fork(postSaga), fork(userSaga)]);\n} // const gen = function*(){\n//      console.log(1);\n//      yield; //yeild에서 멈춘다.\n//      console.log(1);\n//      yield;\n//      console.log(1);\n//      yield;\n// }\n// gen.next();\n//해야 실행된다. 호출하고 done이 true가 될때까지 실행가능\n//while(true){yield '무힌'}; //기점에서 중단됨 gen.next()로 무한반복 가능\n// let i = 0;\n// const gen = function*(){\n//     while(true){\n//         yield i++;\n//     }\n// }\n//이벤트 리스너처럼 특정 지점에서 호출 클릭했을 때 호출 //무한의 이벤트 리스너","map":{"version":3,"sources":["C:/Users/ian07/Desktop/reactSNS/prepare/front/sagas/index.js"],"names":["all","fork","postSaga","userSaga","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,eAAe,UAAUC,QAAV,GAAoB;AAC/B,QAAMJ,GAAG,CAAC,CACN;AACA;AACA;AACA;AACAC,EAAAA,IAAI,CAACC,QAAD,CALE,EAMND,IAAI,CAACE,QAAD,CANE,CAAD,CAAT;AAQH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork } from 'redux-saga/effects'\r\nimport postSaga from './post';\r\nimport userSaga from './user';\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        // saga 쪼개기 전\r\n        // fork(watchLogin), //call이랑은 다름 \r\n        // fork(watchLogout), //fork나 call로 제너레이터 함수를 실행시켜준다. all은 함수를 동시에 실행\r\n        // fork(watchAddPost) \r\n        fork(postSaga),\r\n        fork(userSaga)\r\n        ]);\r\n}\r\n\r\n// const gen = function*(){\r\n//      console.log(1);\r\n//      yield; //yeild에서 멈춘다.\r\n//      console.log(1);\r\n//      yield;\r\n//      console.log(1);\r\n//      yield;\r\n// }\r\n// gen.next();\r\n//해야 실행된다. 호출하고 done이 true가 될때까지 실행가능\r\n//while(true){yield '무힌'}; //기점에서 중단됨 gen.next()로 무한반복 가능\r\n// let i = 0;\r\n// const gen = function*(){\r\n//     while(true){\r\n//         yield i++;\r\n//     }\r\n// }\r\n//이벤트 리스너처럼 특정 지점에서 호출 클릭했을 때 호출 //무한의 이벤트 리스너"]},"metadata":{},"sourceType":"module"}