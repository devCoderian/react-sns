{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from '../reducers/index';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nvar configureStore = function configureStore() {\n  //미들웨어 만들어보기\n  var loggerMiddleware = function loggerMiddleware(_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        console.log(action);\n        return next(action);\n      };\n    };\n  }; //const middlewares = [thunkMiddleware];\n\n\n  var middlewares = [thunkMiddleware, loggerMiddleware]; //const middlewares = []; thunk넣기전\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); //데브툴 연결 보안에는 취약\n  //개발용 미들웨어 설치 필요 npm i redux-devtools-extension\n\n  var store = createStore(reducer, enhancer); //미들웨어는 enhancer를 넣어서 사용가능\n  // store.dispatch({\n  //     type: 'CHANGE_NICKNAME',\n  //     data: '정이안'\n  // })\n  //dispatch하는 순간 리듀서로 전달된다.\n\n  return store;\n}; //debugging이 true일시 리덕스에 대한 설명 참조 가능\n\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/ian07/Desktop/reactSNS/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","reducer","composeWithDevTools","thunkMiddleware","configureStore","loggerMiddleware","dispatch","getState","next","action","console","log","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,mBAAT,QAAmC,0BAAnC;AACA,OAAOC,eAAP,MAA4B,aAA5B;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAK;AACxB;AACA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,QAAEC,QAAF,QAAEA,QAAF;AAAA,QAAYC,QAAZ,QAAYA,QAAZ;AAAA,WAA0B,UAACC,IAAD;AAAA,aAAU,UAACC,MAAD,EAAW;AACpEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,eAAOD,IAAI,CAACC,MAAD,CAAX;AACH,OAHkD;AAAA,KAA1B;AAAA,GAAzB,CAFwB,CAMxB;;;AAEF,MAAMG,WAAW,GAAG,CAACT,eAAD,EAAkBE,gBAAlB,CAApB,CAR0B,CASxB;;AACA,MAAMQ,QAAQ,GAAG,QAChBd,OAAO,CAACC,eAAe,MAAf,SAAmBY,WAAnB,CAAD,CADS,GAEhBV,mBAAmB,CAACF,eAAe,MAAf,SAAmBY,WAAnB,CAAD,CAFpB,CAVwB,CAaxB;AACA;;AACA,MAAME,KAAK,GAAGhB,WAAW,CAACG,OAAD,EAAUY,QAAV,CAAzB,CAfwB,CAgBxB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAOC,KAAP;AACH,CAxBD,C,CA0BA;;;AACA,IAAMC,OAAO,GAAGlB,aAAa,CAACO,cAAD,EAAiB;AAC1CY,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport reducer from '../reducers/index'\r\nimport { composeWithDevTools }from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\nconst configureStore = () =>{\r\n    //미들웨어 만들어보기\r\n    const loggerMiddleware = ({dispatch, getState}) => (next) => (action) =>{\r\n        console.log(action);\r\n        return next(action);\r\n    }\r\n    //const middlewares = [thunkMiddleware];\r\n \r\n  const middlewares = [thunkMiddleware, loggerMiddleware];\r\n    //const middlewares = []; thunk넣기전\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ?compose(applyMiddleware(...middlewares))\r\n    :composeWithDevTools(applyMiddleware(...middlewares))\r\n    //데브툴 연결 보안에는 취약\r\n    //개발용 미들웨어 설치 필요 npm i redux-devtools-extension\r\n    const store = createStore(reducer, enhancer);\r\n    //미들웨어는 enhancer를 넣어서 사용가능\r\n\r\n    // store.dispatch({\r\n    //     type: 'CHANGE_NICKNAME',\r\n    //     data: '정이안'\r\n    // })\r\n    //dispatch하는 순간 리듀서로 전달된다.\r\n    return store;    \r\n};\r\n\r\n//debugging이 true일시 리덕스에 대한 설명 참조 가능\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development' \r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}